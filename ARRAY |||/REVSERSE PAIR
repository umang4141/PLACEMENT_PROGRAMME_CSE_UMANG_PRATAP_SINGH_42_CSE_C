    class Solution {
    public int reversePairs(int[] nums) {
       
    int[] temp = new int[nums.length];
    long ans = mergeSort(nums, temp , 0 , nums.length-1);
    return (int) ans;
}

private int merge(int arr[],int temp[],int left,int mid,int right) {
    int count = 0;
    int i = left;
    int a = left;
    int b = mid;
    int j = mid;
    int k = left;
    
    while ((a <= mid - 1) && (b <= right)) {
        if(arr[a] > 2L* arr[b]) {
            count = count + (mid - a);
            b++;
        }
        else a++;
    }

    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }
    
    while (i <= mid - 1)
        temp[k++] = arr[i++];

    while (j <= right)
        temp[k++] = arr[j++];

    for (i = left; i <= right; i++)
        arr[i] = temp[i];

    return count;

}

 private  long mergeSort(int[] nums , int temp[] , int left , int right){
    int mid = 0;
    long count = 0;
    if(left < right){
        mid = (left + right)/2;

        count += mergeSort(nums,temp,left,mid);
        count += mergeSort(nums,temp,mid+1,right);

        count += merge(nums ,temp ,left , mid+1 , right);
    }
    return count;
}
    }
